@page "/clients"
@using Microsoft.Extensions.Localization
@using TunNetCom.SilkRoadErp.Sales.Api.Contracts.Client
@using TunNetCom.SilkRoadErp.Sales.BlazorApp.Locales
@using TunNetCom.SilkRoadErp.Sales.BlazorApp.Services
@inject ClientService ClientService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<SharedResource> Localizer

<div class="container mt-4">
    <h3 class="mb-3">@Localizer["Clients"]</h3>

    <button class="btn btn-primary mb-3" @onclick="CreateClient">@Localizer["AddClient"]</button>
    <input class="form-control mb-3" placeholder="@Localizer["Search"]" @bind="searchKeyword" @oninput="SearchClients" />

    @if (clients == null)
    {
        <p>@Localizer["Loading"]</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>@Localizer["Nom"]</th>
                    <th>@Localizer["Tel"]</th>
                    <th>@Localizer["Adresse"]</th>
                    <th>@Localizer["Matricule"]</th>
                    <th>@Localizer["Code"]</th>
                    <th>@Localizer["CodeCat"]</th>
                    <th>@Localizer["EtbSec"]</th>
                    <th>@Localizer["Mail"]</th>
                    <th>@Localizer["Actions"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var client in clients)
                {
                    <tr>
                        <td>@client.Nom</td>
                        <td>@client.Tel</td>
                        <td>@client.Adresse</td>
                        <td>@client.Matricule</td>
                        <td>@client.Code</td>
                        <td>@client.CodeCat</td>
                        <td>@client.EtbSec</td>
                        <td>@client.Mail</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => EditClient(client.Id)">@Localizer["Edit"]</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteClient(client.Id)">@Localizer["Delete"]</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-center">
            <button class="btn btn-primary me-2" @onclick="PreviousPage" disabled="@(pageNumber == 1)">@Localizer["Previous"]</button>
            @if (totalPages <= 7)
            {
                @for (var i = 1; i <= totalPages; i++)
                {
                    <button class="btn @((i == pageNumber) ? "btn-warning" : "btn-secondary") me-2" @onclick="() => GoToPage(i)">@i</button>
                }
            }
            else
            {
                @if (pageNumber > 1)
                {
                    <button class="btn @((pageNumber == 1) ? "btn-warning" : "btn-secondary") me-2" @onclick="() => GoToPage(1)">1</button>
                }
                @if (pageNumber > 4)
                {
                    <span class="me-2">...</span>
                }
                @for (var i = Math.Max(1, pageNumber - 2); i <= Math.Min(totalPages, pageNumber + 2); i++)
                {
                    if (i != 1 && i != totalPages)
                    {
                        <button class="btn @((i == pageNumber) ? "btn-warning" : "btn-secondary") me-2" @onclick="() => GoToPage(i)">@i</button>
                    }
                }
                @if (pageNumber < totalPages - 3)
                {
                    <span class="me-2">...</span>
                }
                @if (pageNumber < totalPages)
                {
                    <button class="btn @((pageNumber == totalPages) ? "btn-warning" : "btn-secondary") me-2" @onclick="() => GoToPage(totalPages)">@totalPages</button>
                }
            }
            <button class="btn btn-primary ms-2" @onclick="NextPage" disabled="@(pageNumber >= totalPages)">@Localizer["Next"]</button>
        </div>
    }
</div>

@code {
    private List<ClientResponse>? clients;
    private int pageNumber = 1;
    private const int pageSize = 10;
    private int totalClients;
    private int totalPages;
    private string searchKeyword = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
        var result = await ClientService.GetClientsAsync(pageNumber, pageSize, searchKeyword);
        clients = result.Clients;
        totalClients = result.TotalCount;
        totalPages = result.TotalPages;
    }

    private void CreateClient()
    {
        NavigationManager.NavigateTo("/editclient");
    }

    private void EditClient(int id)
    {
        NavigationManager.NavigateTo($"/editclient/{id}");
    }

    private async Task DeleteClient(int id)
    {
        await ClientService.DeleteClientAsync(id);
        await LoadClients();
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            await LoadClients();
        }
    }

    private async Task NextPage()
    {
        if (pageNumber < totalPages)
        {
            pageNumber++;
            await LoadClients();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            pageNumber = page;
            await LoadClients();
        }
    }

    private async Task SearchClients(ChangeEventArgs args)
    {
        pageNumber = 1;
        searchKeyword = args.Value?.ToString() ?? "";
        await LoadClients();
    }
}
