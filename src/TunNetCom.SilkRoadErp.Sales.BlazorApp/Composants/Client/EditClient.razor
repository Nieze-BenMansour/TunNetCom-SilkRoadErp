@page "/editclient/{id:int?}"
@using Microsoft.Extensions.Localization
@using TunNetCom.SilkRoadErp.Sales.Api.Contracts.Client
@using TunNetCom.SilkRoadErp.Sales.BlazorApp.Services
@using TunNetCom.SilkRoadErp.Sales.BlazorApp.Locales
@using System.Globalization
@inject ClientService ClientService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<SharedResource> Localizer
@inject Blazored.Toast.Services.IToastService ToastService

<h3>@(client.Id == 0 ? Localizer["AddClient"] : Localizer["EditClient"])</h3>

<div class="form-container">
    <EditForm Model="client" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>@Localizer["Nom"]: </label>
            <InputText @bind-Value="client.Nom" class="form-control" />
            @if (!string.IsNullOrEmpty(nomError))
            {
                <div class="text-danger">@nomError</div>
            }
        </div>
        <div>
            <label>@Localizer["Tel"]: </label>
            <InputText @bind-Value="client.Tel" class="form-control" />
            @if (!string.IsNullOrEmpty(telError))
            {
                <div class="text-danger">@telError</div>
            }
        </div>
        <div>
            <label>@Localizer["Adresse"]: </label>
            <InputText @bind-Value="client.Adresse" class="form-control" />
            @if (!string.IsNullOrEmpty(adresseError))
            {
                <div class="text-danger">@adresseError</div>
            }
        </div>
        <div>
            <label>@Localizer["Matricule"]: </label>
            <InputText @bind-Value="client.Matricule" class="form-control" />
            @if (!string.IsNullOrEmpty(matriculeError))
            {
                <div class="text-danger">@matriculeError</div>
            }
        </div>
        <div>
            <label>@Localizer["Code"]: </label>
            <InputText @bind-Value="client.Code" class="form-control" />
            @if (!string.IsNullOrEmpty(codeError))
            {
                <div class="text-danger">@codeError</div>
            }
        </div>
        <div>
            <label>@Localizer["CodeCat"]: </label>
            <InputText @bind-Value="client.CodeCat" class="form-control" />
            @if (!string.IsNullOrEmpty(codeCatError))
            {
                <div class="text-danger">@codeCatError</div>
            }
        </div>
        <div>
            <label>@Localizer["EtbSec"]: </label>
            <InputText @bind-Value="client.EtbSec" class="form-control" />
            @if (!string.IsNullOrEmpty(etbSecError))
            {
                <div class="text-danger">@etbSecError</div>
            }
        </div>
        <div>
            <label>@Localizer["Mail"]: </label>
            <InputText @bind-Value="client.Mail" class="form-control" />
            @if (!string.IsNullOrEmpty(mailError))
            {
                <div class="text-danger">@mailError</div>
            }
        </div>

        <input type="submit" class="btn btn-primary">@Localizer["Save"]</input>
        <input type="button" class="btn btn-close" @onclick="Cancel">@Localizer["Cancel"]</input>
    </EditForm>
    @if (errorMessages != null && errorMessages.Any())
    {
        <div class="alert alert-danger">
            @foreach (var error in errorMessages)
            {
                <p>@error</p>
            }
        </div>
    }
</div>

@code {
    [Parameter] public int? Id { get; set; }
    private ClientResponse client = new ClientResponse();
    private List<string> errorMessages = new List<string>();

    private string? nomError;
    private string? telError;
    private string? adresseError;
    private string? matriculeError;
    private string? codeError;
    private string? codeCatError;
    private string? etbSecError;
    private string? mailError;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id.HasValue)
            {
                client = await ClientService.GetClientByIdAsync(Id.Value);
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading client data: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (client.Id == 0)
            {
                await ClientService.AddClientAsync(new CreateClientRequest
                    {
                        Nom = client.Nom,
                        Tel = client.Tel,
                        Adresse = client.Adresse,
                        Matricule = client.Matricule,
                        Code = client.Code,
                        CodeCat = client.CodeCat,
                        EtbSec = client.EtbSec,
                        Mail = client.Mail
                    });
            }
            else
            {
                await ClientService.UpdateClientAsync(client.Id, new UpdateClientRequest
                    {
                        Nom = client.Nom,
                        Tel = client.Tel,
                        Adresse = client.Adresse,
                        Matricule = client.Matricule,
                        Code = client.Code,
                        CodeCat = client.CodeCat,
                        EtbSec = client.EtbSec,
                        Mail = client.Mail
                    });
            }

            ToastService.ShowSuccess(client.Id == 0 ? "Client added successfully" : "Client updated successfully");
            NavigationManager.NavigateTo("/clients");
        }
        catch (ClientServiceException ex)
        {
            var validationErrors = ex.GetValidationErrors();
            foreach (var error in validationErrors)
            {
                switch (error.PropertyName)
                {
                    case nameof(client.Nom):
                        nomError = error.ErrorMessage;
                        break;
                    case nameof(client.Tel):
                        telError = error.ErrorMessage;
                        break;
                    case nameof(client.Adresse):
                        adresseError = error.ErrorMessage;
                        break;
                    case nameof(client.Matricule):
                        matriculeError = error.ErrorMessage;
                        break;
                    case nameof(client.Code):
                        codeError = error.ErrorMessage;
                        break;
                    case nameof(client.CodeCat):
                        codeCatError = error.ErrorMessage;
                        break;
                    case nameof(client.EtbSec):
                        etbSecError = error.ErrorMessage;
                        break;
                    case nameof(client.Mail):
                        mailError = error.ErrorMessage;
                        break;
                    default:
                        errorMessages.Add(error.ErrorMessage);
                        break;
                }
            }
            
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving client data: {ex.Message}");
        }
    }

    private async Task ValidateField(string fieldName)
    {
        try
        {
            var validationErrors = await ClientService.ValidateFieldAsync(fieldName, client);
            foreach (var error in validationErrors)
            {
                switch (error.Key)
                {
                    case nameof(client.Nom):
                        nomError = string.Join(", ", error.Value);
                        break;
                    case nameof(client.Tel):
                        telError = string.Join(", ", error.Value);
                        break;
                    case nameof(client.Adresse):
                        adresseError = string.Join(", ", error.Value);
                        break;
                    case nameof(client.Matricule):
                        matriculeError = string.Join(", ", error.Value);
                        break;
                    case nameof(client.Code):
                        codeError = string.Join(", ", error.Value);
                        break;
                    case nameof(client.CodeCat):
                        codeCatError = string.Join(", ", error.Value);
                        break;
                    case nameof(client.EtbSec):
                        etbSecError = string.Join(", ", error.Value);
                        break;
                    case nameof(client.Mail):
                        mailError = string.Join(", ", error.Value);
                        break;
                    default:
                        errorMessages.AddRange(error.Value);
                        break;
                }
            }
            if (validationErrors.Any())
            {
                ToastService.ShowError("Please correct the highlighted errors.");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error validating field: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/clients");
    }
}

