@page "/editclient/{id:int?}"
@using Microsoft.Extensions.Localization
@using TunNetCom.SilkRoadErp.Sales.Api.Contracts.Client
@using TunNetCom.SilkRoadErp.Sales.BlazorApp.Services
@using TunNetCom.SilkRoadErp.Sales.BlazorApp.Locales;
@using System.Globalization
@inject ClientService ClientService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<SharedResource> Localizer

<h3>@(client.Id == 0 ? Localizer["AddClient"] : Localizer["EditClient"])</h3>

<div class="form-container">
    <EditForm Model="client" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>@Localizer["Nom"]: </label>
            <InputText @bind-Value="client.Nom" class="form-control" />
        </div>
        <div>
            <label>@Localizer["Tel"]: </label>
            <InputText @bind-Value="client.Tel" class="form-control" />
        </div>
        <div>
            <label>@Localizer["Adresse"]: </label>
            <InputText @bind-Value="client.Adresse" class="form-control" />
        </div>
        <div>
            <label>@Localizer["Matricule"]: </label>
            <InputText @bind-Value="client.Matricule" class="form-control" />
        </div>
        <div>
            <label>@Localizer["Code"]: </label>
            <InputText @bind-Value="client.Code" class="form-control" />
        </div>
        <div>
            <label>@Localizer["CodeCat"]: </label>
            <InputText @bind-Value="client.CodeCat" class="form-control" />
        </div>
        <div>
            <label>@Localizer["EtbSec"]: </label>
            <InputText @bind-Value="client.EtbSec" class="form-control" />
        </div>
        <div>
            <label>@Localizer["Mail"]: </label>
            <InputText @bind-Value="client.Mail" class="form-control" />
        </div>

        <button type="submit" class="button">@Localizer["Save"]</button>
        <button type="button" class="button-secondary" @onclick="Cancel">@Localizer["Cancel"]</button>
    </EditForm>
    @if (errorMessages != null && errorMessages.Any())
    {
        <div class="alert alert-danger">
            @foreach (var error in errorMessages)
            {
                <p>@error</p>
            }
        </div>
    }
</div>


@code {
    [Parameter] public int? Id { get; set; }
    private ClientResponse client = new ClientResponse();
    private List<string> errorMessages = new List<string>();

    private string nomError;
    private string telError;
    private string adresseError;
    private string matriculeError;
    private string codeError;
    private string codeCatError;
    private string etbSecError;
    private string mailError;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id.HasValue)
            {
                Console.WriteLine($"Fetching client with ID: {Id.Value}");
                var existingClient = await ClientService.GetClientByIdAsync(Id.Value);
                if (existingClient != null)
                {
                    client = existingClient;
                    Console.WriteLine($"Client data fetched: {client.Nom}, {client.Tel}, {client.Adresse}");
                }
                else
                {
                    Console.WriteLine("Client not found.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching client data: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        ClearErrors();
        try
        {
            if (client.Id == 0)
            {
                var newClientRequest = new CreateClientRequest
                    {
                        Nom = client.Nom,
                        Tel = client.Tel,
                        Adresse = client.Adresse,
                        Matricule = client.Matricule,
                        Code = client.Code,
                        CodeCat = client.CodeCat,
                        EtbSec = client.EtbSec,
                        Mail = client.Mail
                    };
                await ClientService.AddClientAsync(newClientRequest);
            }
            else
            {
                var updateClientRequest = new UpdateClientRequest
                    {
                        Nom = client.Nom,
                        Tel = client.Tel,
                        Adresse = client.Adresse,
                        Matricule = client.Matricule,
                        Code = client.Code,
                        CodeCat = client.CodeCat,
                        EtbSec = client.EtbSec,
                        Mail = client.Mail
                    };
                await ClientService.UpdateClientAsync(client.Id, updateClientRequest);
            }
            NavigationManager.NavigateTo("/clients");
        }
        catch (ClientServiceException ex)
        {
            Console.WriteLine($"Error content: {ex.ErrorContent}");
            var validationErrors = ex.GetValidationErrors();
            foreach (var error in validationErrors)
            {
                switch (error.Key)
                {
                    case "Nom":
                        nomError = string.Join(", ", error.Value);
                        break;
                    case "Tel":
                        telError = string.Join(", ", error.Value);
                        break;
                    case "Adresse":
                        adresseError = string.Join(", ", error.Value);
                        break;
                    case "Matricule":
                        matriculeError = string.Join(", ", error.Value);
                        break;
                    case "Code":
                        codeError = string.Join(", ", error.Value);
                        break;
                    case "CodeCat":
                        codeCatError = string.Join(", ", error.Value);
                        break;
                    case "EtbSec":
                        etbSecError = string.Join(", ", error.Value);
                        break;
                    case "Mail":
                        mailError = string.Join(", ", error.Value);
                        break;
                    default:
                        errorMessages.Add($"{error.Key}: {string.Join(", ", error.Value)}");
                        break;
                }
            }
            StateHasChanged();
        }
    }

    private void ClearErrors()
    {
        nomError = string.Empty;
        telError = string.Empty;
        adresseError = string.Empty;
        matriculeError = string.Empty;
        codeError = string.Empty;
        codeCatError = string.Empty;
        etbSecError = string.Empty;
        mailError = string.Empty;
        errorMessages.Clear();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/clients");
    }
}
